import React, { useState, useRef } from "react";
import { DndProvider, useDrag, useDrop } from "react-dnd";
import { HTML5Backend } from "react-dnd-html5-backend";
import { Button, Typography, TextField, IconButton, Grid } from "@mui/material";
import DeleteIcon from "@mui/icons-material/Delete";
import DragIndicatorIcon from "@mui/icons-material/DragIndicator";

const ItemType = "ITEM";

// PlaybookEditor コンポーネント
function PlaybookEditor() {
  // アイテムのリストを管理する state
  const [items, setItems] = useState(["Item 1", "Item 2", "Item 3"]);

  // アイテムの移動処理
  const moveItem = (fromIndex, toIndex) => {
    const updatedItems = [...items];
    const [movedItem] = updatedItems.splice(fromIndex, 1);
    updatedItems.splice(toIndex, 0, movedItem);
    setItems(updatedItems);
  };

  // アイテムの追加処理
  const addItem = () => {
    setItems([...items, `New Item ${items.length + 1}`]);
  };

  // アイテムの削除処理
  const removeItem = (index) => {
    const updatedItems = [...items];
    updatedItems.splice(index, 1);
    setItems(updatedItems);
  };

  return (
    <DndProvider backend={HTML5Backend}>
      <div className="App">
        <Typography variant="h4">Playbook Editor</Typography>
      </div>
      <div>
        {/* アイテムのリストをマップして表示 */}
        {items.map((item, index) => (
          <DraggableItem
            key={index}
            index={index}
            item={item}
            moveItem={moveItem}
            removeItem={() => removeItem(index)}
          />
        ))}
      </div>
      <div>
        {/* アイテムを追加するボタン */}
        <Button variant="contained" color="primary" onClick={addItem}>
          Add Item
        </Button>
      </div>
    </DndProvider>
  );
}

// DraggableItem コンポーネント
function DraggableItem({ item, index, moveItem, removeItem }) {
  // ドラッグ可能なアイテムを設定
  const [, ref] = useDrag({
    type: ItemType,
    item: { index },
  });

  // ドロップ可能な領域を設定
  const [, drop] = useDrop({
    accept: ItemType,
    hover: (draggedItem) => {
      if (draggedItem.index !== index) {
        moveItem(draggedItem.index, index);
        draggedItem.index = index;
      }
    },
  });

  // アイテムの編集状態を管理する state
  const [isEditing, setEditing] = useState(false);
  const inputRef = useRef(null);

  // アイテムをクリックしたときの処理
  const handleClick = () => {
    setEditing(true);
  };

  // アイテムの編集を終了したときの処理
  const handleBlur = () => {
    setEditing(false);
  };

  // アイテムのテキストが変更されたときの処理
  const handleInputChange = (e) => {
    const updatedItems = [...items];
    updatedItems[index] = e.target.value;
    setItems(updatedItems);
  };

  // アイテムを削除するボタンをクリックしたときの処理
  const handleRemoveClick = () => {
    removeItem(index);
  };

  return (
    <div
      ref={(node) => ref(drop(node))}
      className={`Item ${isEditing ? "Editing" : ""}`}
      style={{
        border: "2px solid #333",
        padding: "10px",
        marginBottom: "5px",
        display: "flex",
        alignItems: "center",
        position: "relative",
      }}
    >
      <div className="DragHandle">
        <DragIndicatorIcon />
      </div>
      <div>
        {isEditing ? (
          <TextField
            value={item}
            onChange={handleInputChange}
            onBlur={handleBlur}
            inputRef={inputRef}
            autoFocus
          />
        ) : (
          <Grid container alignItems="center">
            <Grid item xs={10}>
              <Typography variant="body1" onClick={handleClick}>
                {item}
              </Typography>
            </Grid>
            <Grid item xs={2}>
              <IconButton onClick={handleRemoveClick}>
                <DeleteIcon />
              </IconButton>
            </Grid>
          </Grid>
        )}
      </div>
    </div>
  );
}

export default PlaybookEditor;
